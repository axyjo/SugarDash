#!/usr/bin/env node

(function() {
  var DAY, HOUR, MINUTE, MONTH, base, date, day, file, from, fs, getDate, hour, info, letter, line, minute, month, name, record, save, second, time, to, type, zone, _base, _i, _j, _k, _len, _len2, _len3, _ref, _ref2, _ref3, _ref4, _ref5;
  fs = require("fs");
  MONTH = "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(/\s+/);
  DAY = "Sun Mon Tue Wed Thu Fri Sat".split(/\s+/);
  MINUTE = 60 * 1000;
  HOUR = MINUTE * 60;
  getDate = function(month, day) {
    var date, last, least, match, _ref, _ref2;
    if (match = /^last(.*)$/.exec(day)) {
      _ref = [month, DAY.indexOf(match[1])], date = _ref[0], day = _ref[1], last = _ref[2];
      while (date.getUTCMonth() === month.getUTCMonth()) {
        if (date.getUTCDay() === day) {
          last = date;
        }
        date = new Date(date.getTime() + 24 * HOUR);
      }
      return last;
    } else if (match = /^first(.*)$/.exec(day)) {
      return getDate(year, month, "" + match[1] + ">=1}");
    } else if (match = /^(\w)>=(\d+)$/.exec(day)) {
      _ref2 = [month, DAY.indexOf(match[1]), parseInt(match[2], 10)], date = _ref2[0], day = _ref2[1], least = _ref2[2];
      while (date.getUTCDate() < least) {
        date.setUTCDate(date.getUTCDate() + 1);
      }
      while (date.getUTCDay() !== day) {
        date.setUTCDate(date.getUTCDate() + 1);
      }
      return date;
    } else {
      month.setUTCDate(parseInt(day, 10));
      return month;
    }
  };
  _ref = process.argv.slice(2);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    file = _ref[_i];
    info = {
      rules: {},
      zones: {}
    };
    base = file.replace(/^.*\/(.*)$/, "$1");
    name = null;
    _ref2 = fs.readFileSync(file, "utf8").split(/\n/);
    for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
      line = _ref2[_j];
      line = line.trim();
      if (line === "" || /^\s*#/.test(line)) {
        continue;
      }
      line = line.replace(/\s*#.*$/, "");
      record = line.split(/\s+/);
      switch (record[0]) {
        case "Rule":
          _ref3 = record.slice(1), name = _ref3[0], from = _ref3[1], to = _ref3[2], type = _ref3[3], month = _ref3[4], day = _ref3[5], time = _ref3[6], save = _ref3[7], letter = _ref3[8];
          if (type !== "-") {
            console.log(type);
          }
          (_base = info.rules)[name] || (_base[name] = []);
          info.rules[name].push({
            from: parseInt(from, 10),
            to: (function() {
              switch (to) {
                case "only":
                  return parseInt(from, 10);
                case "max":
                  return Number.MAX_VALUE;
                default:
                  return parseInt(to, 10);
              }
            })(),
            type: type,
            month: MONTH.indexOf(month),
            day: day,
            time: time,
            save: save,
            letter: letter
          });
          break;
        default:
          if (record[0] === "Zone") {
            name = record[1];
            info.zones[name] = [];
            record = record.slice(2);
          }
          info.zones[name].push({
            offset: record[0],
            rules: record[1],
            format: record[2],
            until: record.slice(3)
          });
      }
    }
    _ref4 = info.zones;
    for (name in _ref4) {
      zone = _ref4[name];
      zone.reverse();
      for (_k = 0, _len3 = zone.length; _k < _len3; _k++) {
        record = zone[_k];
        if (record.rules === "-") {
          delete record.rules;
        }
        if (record.until.length) {
          record.standard = false;
          record.utc = false;
          date = new Date(Date.UTC(parseInt(record.until.shift(), 10), MONTH.indexOf(record.until.shift() || "Jan")));
          if (record.until.length) {
            date = getDate(date, record.until.shift());
            if (record.until.length) {
              _ref5 = /^(\d+):(\d+)(?::(\d+))?(s|w|g|u|z)?$/.exec(record.until.shift()).slice(1), hour = _ref5[0], minute = _ref5[1], second = _ref5[2], type = _ref5[3];
              date.setUTCHours(parseInt(hour, 10));
              date.setUTCMinutes(parseInt(minute, 10));
              if (second != null) {
                date.setUTCSeconds(parseInt(minute, 10));
              }
              switch (type) {
                case "s":
                  record.standard = true;
                  break;
                case "g":
                case "u":
                case "z":
                  record.standard = true;
                  record.utc = true;
              }
            }
          }
          record.until = date;
        } else {
          delete record.until;
        }
      }
    }
    process.stdout.write(JSON.stringify(info, null, 2));
  }
}).call(this);
